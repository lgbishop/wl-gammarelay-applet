import { CheckBox, Slider } from "std-widgets.slint";

export component ToggleSwitch inherits Rectangle {
    callback toggled;
    in-out property <bool> checked;
    min-height: 16px;
    max-height: 24px;

    HorizontalLayout {
        indicator := Rectangle {
            border-radius: 0px;
            background: touch.has-hover ? (checked ? #888 : #555) : (checked ? #666 : #444);
            animate background { duration: 100ms; }

            bubble := Rectangle {
                height: parent.height;
                width: parent.width / 2.5;
                border-radius: 0px;
                x: self.a * (indicator.width - bubble.width);
                property <float> a: checked ? 1 : 0;
                background: touch.has-hover ? (checked ? #eee : #888) : (checked ? #ddd : #666);
                animate a, background { duration: 200ms; easing: ease;}
            }
        }
    }

    touch := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            checked = !checked;
            Parameters.invert-changed(checked);
        }
    }
}

export component VerticalSlider inherits Rectangle {
    in property<string> param-name;
    in property<float> maximum: 100;
    in property<float> minimum: 0;
    in property<float> default-value;
    in-out property<float> value;
    
    min-height: 60px;
    preferred-height: 120px;
    preferred-width: 20px;

    border-radius: 0px;
    background: touch.has-hover ? 
        (touch.pressed ? #666 : #555) :
        (touch.pressed ? #666 : #444);

    handle := Rectangle {
        width: parent.width - 2px;
        height: 6px;
        border-radius: 0px;
        background: touch.pressed ? #eee : touch.has-hover ? #ddd : #aaa;
        y: (root.height - self.height) * root.value/(root.minimum - root.maximum) + root.height - self.height;
        animate y, background { duration: 60ms; }
    }

    touch := TouchArea {
        property<float> pressed-value-for-dragging;

        scroll-event(event) => {
            if (event.delta-y >= 1px) {
                root.value = max(root.minimum, min(root.maximum, root.value + (event.modifiers.shift ? 0.01 : 0.025)));
            } else if (event.delta-y <= -1px) {
                root.value = max(root.minimum, min(root.maximum, root.value - (event.modifiers.shift ? 0.01 : 0.025)));
            }
            Parameters.slider-changed(root.param-name, root.value);
            EventResult.accept
        }
        pointer-event(event) => {
            if (event.button == PointerEventButton.left && event.kind == PointerEventKind.down) {
                root.value = root.maximum - ((touch.mouse-y / touch.height) * (root.maximum));
                self.pressed-value-for-dragging = root.value;
                Parameters.slider-changed(root.param-name, root.value);
            }
            if (event.button == PointerEventButton.right && event.kind == PointerEventKind.down) {
                root.value = root.default-value;
                Parameters.slider-default(root.param-name);
            }
        }
        moved => {
            if (self.enabled && self.pressed) {
                root.value = max(root.minimum, min(root.maximum,
                    self.pressed-value-for-dragging - (touch.mouse-y - touch.pressed-y) * (root.maximum - root.minimum) / (root.height - handle.height)));
                Parameters.slider-changed(root.param-name, root.value);
            }
        }
    }
}

component LabeledToggleSwitch inherits HorizontalLayout {
    in property <string> label;
    in-out property <bool> checked;
    padding: 5px;
    spacing: 6px;

    if Startup.show_labels : Rectangle {
        Text {
            text: root.label;
            font-size: 16px;
            color: #fff;
        }
    }

    switch := ToggleSwitch { checked: checked; }
}

component LabeledVerticalSlider inherits VerticalLayout {
    in property <string> param-name;
    in property <string> label;
    in property <float> minimum;
    in property <float> maximum;
    in property <float> default-value;
    in-out property <float> value;
    padding: 1px;
    spacing: 6px;

    if Startup.show_labels : Rectangle {
        Text {
            text: root.label;
            font-size: 13px;
        }
    }

    slider := VerticalSlider {
        param-name: param-name;
        minimum: root.minimum;
        maximum: root.maximum;
        default-value: root.default-value;
        value: root.value;
    }
}

export component WindowCaret inherits Path {
    // commands: "M0,0 L2,4 C3,6 5,6 6,4 L8,0"; // rounded triangle
    commands: "M0,0 L2,4 C4,8 4,8 6,4 L8,0"; // sharper triangle
}

export global Parameters {
    callback invert-changed(bool);
    callback slider-changed(string, float);
    callback slider-default(string);
    in-out property<float> window-opacity: 0.0;
    in-out property<string> value-text: "";
    in-out property<bool> focus-retain: false;
    in-out property<bool> force-exit: false;

    in-out property<bool> invert;
    in-out property<float> temperature;
    in-out property<float> brightness;
    in-out property<float> gamma;
}

export global Startup {
    in-out property<bool> fade-in: true;
    in property<float> fade-in-speed: 8.0;
    in property<float> fade-out-speed: 2.0;

    in property<bool> show-value: true;
    in property<bool> show-invert: true;
    in property<bool> show-temperature: true;
    in property<bool> show-brightness: true;
    in property<bool> show-gamma: true;
   
    in property<bool> show-caret: true;
    in property<bool> show-labels: true;

    in property<bool> never-fade: false;
    in property<int> outer-padding: 8;
    in property<int> window-width: 100;
    in property<int> window-height: 220;

    in property<float> default-temperature;
    in property<float> default-brightness;
    in property<float> default-gamma;
}

export component WlGammaRelayApplet inherits Window {
    title: "wl-gammarelay-applet";
    background: rgba(0.0, 0.0, 0.0, 0.0);
    preferred-width: Startup.window_width * 1px;
    preferred-height: Startup.window_height * 1px;
    no-frame: true;
    
    callback tick(float);
    callback manage_opacity(float);
    manage_opacity(delta) => {
        if (applet-focus.has-hover) {
            Startup.fade-in = false;
            applet-kb-focus.focus();
        }
        if ((Startup.fade-in || applet-focus.has-hover) && Parameters.window-opacity <= 1.0) {
            Parameters.window-opacity += (delta / 1000.0) * Startup.fade-in-speed;
            if (Parameters.window-opacity >= 1.0) {
                Parameters.window-opacity = 1.0;
            }
        } else if ((!applet-focus.has-hover && !applet-kb-focus.has-focus && !Startup.never-fade) || Parameters.force-exit) {
            Parameters.window-opacity -= (delta / 1000.0) * Startup.fade-out-speed;
        }
    }

    applet-focus := TouchArea {
        applet-kb-focus := FocusScope {
            key-pressed(event) => {
                if (event.text == "\u{001B}") { // escape
                    Parameters.force-exit = true;
                }
                if (event.modifiers.shift || event.modifiers.meta) {
                    Parameters.focus-retain = true;
                    self.focus();
                }
                EventResult.accept
            }
            key-released(event) => {
                if (!event.modifiers.shift || event.modifiers.meta) {
                    Parameters.focus-retain = false;
                    self.focus();
                }
                EventResult.accept
            }

            opaque-region := VerticalLayout {
                panel-rect := Rectangle {
                    border-width: 2px;
                    border-color: #777;
                    border-radius: 0px;
                    background: #111;
                    opacity: Parameters.window-opacity;
                
                    controls := VerticalLayout {
                        padding: Startup.outer_padding * 1px;
                        
                        if Startup.show_value : value := Rectangle {
                            Text {
                                text: Parameters.value-text;
                                color: #fff;
                            }
                        }

                        if Startup.show_invert : invert := LabeledToggleSwitch {
                            label: "â—©";
                            checked: Parameters.invert;
                            padding-bottom: 0px;
                        }

                        sliders := HorizontalLayout {
                            padding: 4px;
                            spacing: 2px;

                            if Startup.show_temperature : temperature := LabeledVerticalSlider {
                                label: "T";
                                param-name: "temperature";
                                value: Parameters.temperature;
                                default-value: Startup.default-temperature;
                                minimum: 0.0;
                                maximum: 1.0;
                            }
                            if Startup.show_brightness : brightness := LabeledVerticalSlider {
                                label: "B";
                                param-name: "brightness";
                                value: Parameters.brightness;
                                default-value: Startup.default-brightness;
                                minimum: 0.0;
                                maximum: 1.0;
                            }
                            if Startup.show_gamma : gamma := LabeledVerticalSlider {
                                label: "G";
                                param-name: "gamma";
                                value: Parameters.gamma;
                                default-value: Startup.default-gamma;
                                minimum: 0.0;
                                maximum: 1.0;
                            }
                        }
                    }
                }
                if Startup.show_caret : tail := WindowCaret {
                    fill: #777;
                    height: 16px;
                    opacity: Parameters.window-opacity;
                }
            }
        }
    }
}
